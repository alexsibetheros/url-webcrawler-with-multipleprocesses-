#include <stdlib.h>
#include <stdio.h>
#include "hash.h"
#include "list.h"
#include "core.h"
#include <string.h>

////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
l_node_point* create_table(int table_size)/*Create starting Hashtable*/
{
    	int i;
    	l_node_point* hash_table;
	//printf("Created table with size: %d\n",table_size);
    	hash_table= malloc( table_size*sizeof(l_node_point) );
    	for(i=0;i<table_size;i++)
        	hash_table[i]=NULL;/*Cells start with null*/
    	return hash_table;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
int hash_function(char *key,int size)
{
	int h=0;
	while(*key) h+=*key++; //Add's the ASCII of each char
	if(h<0){  h=h*(-1);}
	return h%size; //Returns h^2 mode size
	// (Some characters are encoded differently, giving negative numbers, the squared removes all negative numbers
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void insert_into_hash(core_point my_core, char* get_url, int place )
{ 
	if( my_core->hash_table[place] ==NULL){ 
		my_core->hash_table[place]=create_list(get_url);
	}
	else{ 
		my_core->hash_table[place]=insert_into_list(my_core->hash_table[place], get_url) ;
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void print_hash(core_point my_core) /*Debugging tool to print hash table with data*/
{
	printf("Print HASH\n");
	int i;
	l_node_point temp;
	for( i=0;i<(my_core->table_size);i++){
		if( my_core->hash_table[i]==NULL){
			printf("*---{%d}---*\n-----NULL-----\n",i);
		}else{
			temp=my_core->hash_table[i];
			while(temp!=NULL){
				printf("*---{%d}---*\n",i);
				print_info( temp->url );
				temp=temp->next;
			}
		}
	}
	printf("\n\n");		
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
int check_url(core_point my_core, char* get_url)//Checks to see if given string exists in hash
{
	int place=hash_function(get_url,my_core->t_size);
	l_node_point temp;
	if( my_core->hash_table[place]!=NULL){
		temp=my_core->hash_table[place];
		while(temp!=NULL){
			if (!strcmp(temp->url,get_url)){
				return 1;
			}
			temp=temp->next;
		}
	}
	
	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
void delete_hash(core_point my_core){
	int i;
	for(i=0;i< my_core->table_size ;i++){
		delete_list(my_core->hash_table[i]);
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////

